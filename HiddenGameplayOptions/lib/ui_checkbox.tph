// *** UI functions for adding checkbox controls to option screens ***

INCLUDE ~%MOD_FOLDER%/lib/functions.tph~

/**
 * Installs a new checkbox option to the game.
 * INT_VAR optLabelTra    The TRA reference number of the option label string.
 * INT_VAR optDescTra     The TRA reference number of the option description text.
 * INT_VAR controlID      A unique number that identifies this option.
 *                        Recommended: Use negative number to minimize interference with existing IDs.
 * INT_VAR autoFail       Set to nonzero to force termination of component installation on error.
 * STR_VAR arrayName      Name of the LUA array containing option definitions.
 *                          toggleTitles:     used by Gameplay options
 *                          feedbackToggles:  used by Gameplay > Feedback > Visual Feedback
 *                          messagesToggles:  used by Gameplay > Feedback > Feedback Messages
 *                          graphicsToggles:  used by Graphics > Display Options
 * STR_VAR optLabelName   Name of the option label variable.
 * STR_VAR optDescName    Name of the option description variable.
 * STR_VAR iniSection     Section name of the option that will be added to baldur.lua (e.g. "Program Options").
 * STR_VAR iniName        Option name that will be added to baldur.lua (e.g. "Debug Mode").
 * RET success            Returns 1 on success, 0 otherwise.
 */
DEFINE_ACTION_FUNCTION INSTALL_CHECK_OPTION
INT_VAR
  optLabelTra   = "-1"
  optDescTra    = "-1"
  controlID     = 0
  autoFail      = 1
STR_VAR
  arrayName     = "toggleTitles"
  optLabelName  = ""
  optDescName   = ""
  iniSection    = ""
  iniName       = ""
RET
  success
BEGIN
  OUTER_SET success = 0

  ACTION_IF (optLabelTra >= 0 AND
             optDescTra >= 0 AND
             controlID != 0 AND
             NOT ~%arrayName%~ STR_EQ ~~ AND
             NOT ~%optLabelName%~ STR_EQ ~~ AND
             NOT ~%optDescName%~ STR_EQ ~~ AND
             NOT ~%iniSection%~ STR_EQ ~~ AND
             NOT ~%iniName%~ STR_EQ ~~) BEGIN
    OUTER_SET failed = 0

    LAF ADD_LUA_DEFINITION
    INT_VAR traRef = optDescTra
    STR_VAR varName = EVAL ~%optDescName%~
    RET success
    END
    ACTION_IF (NOT success) BEGIN
      ACTION_IF (autoFail) BEGIN
        FAIL @101 // Cannot patch LUA file
      END ELSE BEGIN
        OUTER_SET failed = 1
      END
    END

    ACTION_IF (NOT failed) BEGIN
      LAF ADD_LUA_DEFINITION
      INT_VAR traRef = optLabelTra
      STR_VAR varName = EVAL ~%optLabelName%~
      RET success
      END
      ACTION_IF (NOT success) BEGIN
        ACTION_IF (autoFail) BEGIN
          FAIL @101 // Cannot patch LUA file
        END ELSE BEGIN
          OUTER_SET failed = 1
        END
      END
    END

    ACTION_IF (NOT failed) BEGIN
      COPY_EXISTING ~ui.menu~ ~override~
        LPF ADD_GAMEPLAY_OPTION
        INT_VAR
          controlID   = controlID
        STR_VAR
          arrayName   = EVAL "%arrayName%"
          optLabel    = EVAL ~%optLabelName%~
          optDesc     = EVAL ~%optDescName%~
          iniSection  = EVAL ~%iniSection%~
          iniName     = EVAL ~%iniName%~
        RET
          success
        END
        PATCH_IF (NOT success) BEGIN
          PATCH_IF (autoFail) BEGIN
            PATCH_FAIL @102 // Cannot patch UI.MENU
          END ELSE BEGIN
            SET failed = 1
          END
        END
    END

    OUTER_SET success = failed ? 0 : 1
  END
END


/**
 * Adds a new option to the 'Gameplay' section of the Options menu.
 * INT_VAR controlID  A unique number that identifies the option.
 *                    Recommended: Use negative number to minimize interference with existing IDs.
 * STR_VAR arrayName  Name of the LUA array containing option definitions.
 * STR_VAR optLabel   Variable name referring to option label text (e.g. "SHOW_DEBUG_CONSOLE_LABEL").
 * STR_VAR optDesc    Variable name referring to option description text (e.g. "SHOW_DEBUG_CONSOLE_DESC").
 * STR_VAR iniSection Section name of option that will be added to baldur.lua (e.g. "Program Options").
 * STR_VAR iniName    Option name that will be added to baldur.lua (e.g. "Debug Mode").
 * RET success        Returns 1 if changes have been applied successfully, 0 otherwise.
 */
DEFINE_PATCH_FUNCTION ADD_GAMEPLAY_OPTION
INT_VAR
  controlID = 0
STR_VAR
  arrayName   = ""
  optLabel    = ""
  optDesc     = ""
  iniSection  = ""
  iniName     = ""
RET
  success
BEGIN
  SET success = 0
  PATCH_IF (controlID != 0 AND
            NOT ~%arrayName%~ STR_EQ ~~ AND
            NOT ~%optLabel%~ STR_EQ ~~ AND
            NOT ~%optDesc%~ STR_EQ ~~ AND
            NOT ~%iniSection%~ STR_EQ ~~ AND
            NOT ~%iniName%~ STR_EQ ~~) BEGIN
    LPF __A7_INIT_CODE RET success END
    PATCH_IF (success) BEGIN
      LPF __A7_ADD_OPTION
      INT_VAR controlID = controlID
      STR_VAR
        arrayName   = EVAL "%arrayName%"
        optLabel    = EVAL ~%optLabel%~
        optDesc     = EVAL ~%optDesc%~
        iniSection  = EVAL ~%iniSection%~
        iniName     = EVAL ~%iniName%~
      RET success
      END
    END
  END
END


// Used internally: implement new entry in UI.MENU
DEFINE_PATCH_FUNCTION __A7_ADD_OPTION
INT_VAR
  controlID = 0
STR_VAR
  arrayName   = ""
  optLabel    = ""
  optDesc     = ""
  iniSection  = ""
  iniName     = ""
RET
  success
BEGIN
  SET success = 0
  SET matches = 0   // keeps track of modifications

  // 1. adding entry to options array
  LPF __A7_APPEND_OPTION_ARRAY
  INT_VAR
    startOfs = 0
    controlID = controlID
  STR_VAR
    arrayName = EVAL "%arrayName%"
    optLabel  = EVAL "%optLabel%"
    optDesc   = EVAL "%optDesc%"
  RET
    success
    endOfs    // points to or behind the end of the array construct
  END

  PATCH_IF (success) BEGIN
    SET matches += 1

    // 2. adding code for reading initial state of option
    LPF __A7_EXPAND_READ_OPTION
    INT_VAR
      startOfs    = endOfs
      controlID   = controlID
    STR_VAR
      arrayName   = EVAL "%arrayName%"
      iniSection  = EVAL "%iniSection%"
      iniName     = EVAL "%iniName%"
    RET
      success
      endOfs    // points to or behind the end of the array construct
    END

    PATCH_IF (success) BEGIN
      SET matches += 1

      // 3. adding code for writing current state of option
      LPF __A7_EXPAND_WRITE_OPTION
      INT_VAR
        startOfs    = endOfs
        controlID   = controlID
      STR_VAR
        arrayName   = EVAL "%arrayName%"
        iniSection  = EVAL "%iniSection%"
        iniName     = EVAL "%iniName%"
      RET
        success
        endOfs    // points to or behind the end of the array construct
      END

      PATCH_IF (success) BEGIN
        SET matches += 1
      END
    END
  END

  SET success = (matches = 3) ? 1 : 0
END


// Used internally: adds a new entry to array structure
DEFINE_PATCH_FUNCTION __A7_APPEND_OPTION_ARRAY
INT_VAR
  startOfs  = 0
  controlID = 0
STR_VAR
  arrayName = ""
  optLabel  = ""
  optDesc   = ""
RET
  success
  endOfs    // points to or behind the end of the array construct
BEGIN
  SET success = 0
  SET endOfs = startOfs

  SET ofs = INDEX_BUFFER(~%arrayName%[ %TAB%]*=[ %TAB%]*{~ startOfs)
  PATCH_IF (ofs >= startOfs) BEGIN
    SET ofs = INDEX_BUFFER(~[%WNL%]~ ofs)
    SET ofs1 = INDEX_BUFFER(~{~ ofs)
    PATCH_IF (ofs1 >= ofs) BEGIN
      SET ofs2 = INDEX_BUFFER(~},~ ofs1)
      PATCH_IF (ofs2 >= ofs1) BEGIN
        READ_ASCII ofs1 line (ofs2 - ofs1)

        SET itemCount = 1
        INNER_PATCH ~%line%~ BEGIN
          // counting array items
          REPLACE_EVALUATE ~,~ BEGIN SET itemCount += 1 END ~,~

          // determining quotation type for string arguments
          SET ofsQuote = INDEX_BUFFER(~["']~)
          PATCH_IF (ofsQuote >= 0) BEGIN
            READ_ASCII ofsQuote quote (1)
          END ELSE BEGIN
            TEXT_SPRINT quote ~"~
          END

          // getting format for option description
          TEXT_SPRINT argLabel ~%quote%%optLabel%%quote%~
          TEXT_SPRINT argDesc  ~%quote%%optDesc%%quote%~
          INNER_PATCH_SAVE arg2 ~%line%~ BEGIN REPLACE_TEXTUALLY ~[^,]+,[ %TAB%]*\([^,]+\).*~ ~\1~ END
          PATCH_IF (~%arg2%~ STRING_MATCHES_REGEXP ~[ %TAB%]*-?[0-9]+[ %TAB%]*~ = 0) BEGIN
            LPF GET_LUA_VALUE STR_VAR varName = EVAL ~%optDesc%~ RET value END
            TEXT_SPRINT argDesc ~%value%~
          END
        END

        // generating array item string
        PATCH_IF (itemCount > 3) BEGIN
          TEXT_SPRINT entry ~{%argLabel%, %argDesc%, %controlID%~
          FOR (idx = 3; idx < itemCount; idx += 1) BEGIN
            TEXT_SPRINT entry ~%entry%, 0~
          END
          TEXT_SPRINT entry ~%entry%},%WNL%~
          SET entryLen = STRING_LENGTH ~%entry%~

          // adding new entry
          SET ofs = INDEX_BUFFER(~%LNL%[ %TAB%]*}[ %TAB%%WNL%]~ ofs2) + 1

          // making sure last array entry contains a terminating comma
          SET ofs2 = RINDEX_BUFFER(~}~ (ofs - 1))
          PATCH_IF (ofs2 >= 0 && ofs2 < ofs) BEGIN
            READ_ASCII ofs2 buf (ofs - ofs2 - 1)
            PATCH_IF (~%buf%~ STRING_CONTAINS_REGEXP ~,~ != 0) BEGIN
              SET ofs2 += 1
              INSERT_BYTES ofs2 1
              WRITE_ASCII ofs2 ~,~
              SET ofs += 1
            END
          END

          INSERT_BYTES ofs entryLen
          WRITE_ASCIIE ofs ~%entry%~
          SET endOfs = ofs + entryLen + 1
          SET success = 1
        END
      END
    END
  END
END


// Used internally: specified option reads initial state from baldur.lua
DEFINE_PATCH_FUNCTION __A7_EXPAND_READ_OPTION
INT_VAR
  startOfs  = 0
  controlID = 0
STR_VAR
  arrayName   = ""
  iniSection  = ""
  iniName     = ""
RET
  success
  endOfs
BEGIN
  SET success = 0
  SET endOfs = startOfs

  SET ofs = INDEX_BUFFER(~for[ %TAB%]+index,[ %TAB%]+var[ %TAB%]+in[ %TAB%]+pairs(%arrayName%)[ %TAB%]+do~ startOfs)
  PATCH_IF (ofs >= startOfs) BEGIN
    SET ofs1 = INDEX_BUFFER(~[ %TAB%]if[ %TAB%]+(var\[3\][ %TAB%]*==[ %TAB%]*-?[0-9]+)[ %TAB%]+then~ ofs)
    SET ofs2 = INDEX_BUFFER(~.*Infinity_GetOption~ ofs)
    PATCH_IF (ofs1 >= ofs && ofs1 < ofs2) BEGIN
      SET mode = 2  // custom option already exists
      SET ofs1 += 1 // skip to start of "if" statement
      SET ofs = ofs1
      SET ofs3 = RINDEX_BUFFER(~[^ %TAB%]~ (ofs1 - 1)) + 1
      PATCH_IF (ofs3 > 0) BEGIN
        READ_ASCII ofs3 indent (ofs1 - ofs3)
      END
    END ELSE PATCH_IF (ofs2 >= ofs) BEGIN
      SET mode = 1  // first custom option to add
      SET ofs = ofs2
      SET ofs3 = INDEX_BUFFER(~[^ %TAB%]~ ofs2)
      PATCH_IF (ofs3 > ofs2) BEGIN
        READ_ASCII ofs2 indent (ofs3 - ofs2)
      END
    END ELSE BEGIN
      SET mode = 0  // no matching option found
    END

    PATCH_IF (NOT VARIABLE_IS_SET "indent") BEGIN
      TEXT_SPRINT indent ~%TAB%%TAB%%TAB%~
    END

    PATCH_IF (mode > 0) BEGIN
      TEXT_SPRINT code ~~
      PATCH_IF (mode = 1) BEGIN
      TEXT_SPRINT code ~%code%%indent%~
      END
      TEXT_SPRINT code ~%code%if (var[3] == %controlID%) then%WNL%%indent%%TAB%var[5] = getDeferredOption('%iniSection%', '%iniName%')%WNL%%indent%else~
      PATCH_IF (mode = 1) BEGIN
        TEXT_SPRINT code ~%code%%WNL%%TAB%~
      END
      SET codeLen = STRING_LENGTH ~%code%~
      INSERT_BYTES ofs codeLen
      WRITE_ASCIIE ofs ~%code%~
      SET ofs += codeLen

      PATCH_IF (mode = 1) BEGIN
        SET ofs = INDEX_BUFFER(~[%WNL%]~ ofs)
        TEXT_SPRINT code ~%WNL%%indent%end~
        SET codeLen = STRING_LENGTH ~%code%~
        INSERT_BYTES ofs codeLen
        WRITE_ASCIIE ofs ~%code%~
        SET ofs += codeLen
      END

      SET endOfs = ofs
      SET success = 1
    END
  END
END


// Used internally: specified option writes current state of option to baldur.lua
DEFINE_PATCH_FUNCTION __A7_EXPAND_WRITE_OPTION
INT_VAR
  startOfs  = 0
  controlID = 0
STR_VAR
  arrayName   = ""
  iniSection  = ""
  iniName     = ""
RET
  success
  endOfs
BEGIN
  SET success = 0
  SET endOfs = startOfs

  SET ofs = INDEX_BUFFER(~for[ %TAB%]+index,[ %TAB%]+var[ %TAB%]+in[ %TAB%]+pairs(%arrayName%)[ %TAB%]+do~ startOfs)
  PATCH_IF (ofs >= startOfs) BEGIN
    SET ofs1 = INDEX_BUFFER(~[ %TAB%]if[ %TAB%]+(var\[3\][ %TAB%]*==[ %TAB%]*-?[0-9]+)[ %TAB%]+then~ ofs)
    SET ofs2 = INDEX_BUFFER(~.*Infinity_ChangeOption~ ofs)
    PATCH_IF (ofs1 >= ofs && ofs1 < ofs2) BEGIN
      SET mode = 2  // custom option already exists
      SET ofs1 += 1 // skip to start of "if" statement
      SET ofs = ofs1
      SET ofs3 = RINDEX_BUFFER(~[^ %TAB%]~ (ofs1 - 1)) + 1
      PATCH_IF (ofs3 > 0) BEGIN
        READ_ASCII ofs3 indent (ofs1 - ofs3)
      END
    END ELSE PATCH_IF (ofs2 >= ofs) BEGIN
      SET mode = 1  // first custom option to add
      SET ofs = ofs2
      SET ofs3 = INDEX_BUFFER(~[^ %TAB%]~ ofs2)
      PATCH_IF (ofs3 > ofs2) BEGIN
        READ_ASCII ofs2 indent (ofs3 - ofs2)
      END
    END ELSE BEGIN
      SET mode = 0  // no matching option found
    END
    
    PATCH_IF (NOT VARIABLE_IS_SET "indent") BEGIN
      TEXT_SPRINT indent ~%TAB%%TAB%%TAB%%TAB%~
    END
    
    PATCH_IF (mode > 0) BEGIN
      TEXT_SPRINT code ~~
      PATCH_IF (mode = 1) BEGIN
      TEXT_SPRINT code ~%code%%indent%~
      END
      TEXT_SPRINT code ~%code%if (var[3] == %controlID%) then%WNL%%indent%%TAB%setDeferredOption('%iniSection%', '%iniName%', var[5])%WNL%%indent%else~
      PATCH_IF (mode = 1) BEGIN
        TEXT_SPRINT code ~%code%%WNL%%TAB%~
      END
      SET codeLen = STRING_LENGTH ~%code%~
      INSERT_BYTES ofs codeLen
      WRITE_ASCIIE ofs ~%code%~
      SET ofs += codeLen

      PATCH_IF (mode = 1) BEGIN
        SET ofs = INDEX_BUFFER(~[%WNL%]~ ofs)
        TEXT_SPRINT code ~%WNL%%indent%end~
        SET codeLen = STRING_LENGTH ~%code%~
        INSERT_BYTES ofs codeLen
        WRITE_ASCIIE ofs ~%code%~
        SET ofs += codeLen
      END

      SET endOfs = ofs
      SET success = 1
    END
  END
END
