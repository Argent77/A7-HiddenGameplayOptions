// *** Generic UI-related functions ***

/**
 * This patch macro sorts numeric arrays in ascending or descending order.
 * Parameters:
 * INT_VAR sort_size        (Optional) Number of elements in the array. Specify negative size to perform auto-detection. (Default: auto-detect size)
 * INT_VAR sort_reverse     (Optional) Set to zero to sort in ascending order. Set to non-zero to sort in descending order. (Default: ascending order)
 * STR_VAR sort_array_name  (Mandatory) The array's base name.
 */
DEFINE_PATCH_MACRO SORT_NUMERIC_ARRAY
BEGIN
  LOCAL_SET idx = 0 LOCAL_SET i = 0 LOCAL_SET j = 0 LOCAL_SET v1 = 0 LOCAL_SET v2 = 0
  LOCAL_SET r = VARIABLE_IS_SET ~sort_reverse~ ? sort_reverse : 0
  LOCAL_SET s = VARIABLE_IS_SET ~sort_size~ ? sort_size : "-1"

  PATCH_IF (NOT ~%sort_array_name%~ STR_EQ ~~) BEGIN
    // Auto-detect array size
    PATCH_IF (s < 0) BEGIN
      SET idx = 0
      WHILE (idx != "-1") BEGIN
        PATCH_IF (VARIABLE_IS_SET EVAL ~%sort_array_name%_%idx%~) BEGIN
          SET idx += 1
        END ELSE BEGIN
          SET s = idx
          SET idx = "-1"
        END
      END
    END

    // Sort array using "Selection Sort" algorithm
    FOR (j = 0; j < s - 1; ++j) BEGIN
      // Find and mark index of lowest/highest value in remaining sublist
      SET idx = j
      SET v1 = EVAL ~%sort_array_name%_%idx%~
      FOR (i = j + 1; i < s; ++i) BEGIN
        SET v2 = EVAL ~%sort_array_name%_%i%~
        PATCH_IF ((r && v2 > v1) || (NOT r && v2 < v1)) BEGIN
          SET idx = i
          SET v1 = EVAL ~%sort_array_name%_%idx%~
        END
      END

      // Swap values if needed
      PATCH_IF (idx != j) BEGIN
        SET v1 = EVAL ~%sort_array_name%_%idx%~
        SET EVAL ~%sort_array_name%_%idx%~ = EVAL ~%sort_array_name%_%j%~
        SET EVAL ~%sort_array_name%_%j%~ = v1
      END
    END
  END
END

/** Action macro for sorting numeric arrays. */
DEFINE_ACTION_MACRO SORT_NUMERIC_ARRAY
BEGIN
  OUTER_PATCH ~~ BEGIN LPM SORT_NUMERIC_ARRAY END
END


/**
 * Adds a new string variable definition into all available L_xx_YY.LUA resources.
 * INT_VAR traRef   TRA reference number of the string to add.
 * STR_VAR varName  Name of the variable to add.
 * RET success      Returns 1 if definition has been added successfully to all available LUA files, 0 otherwise.
 */
DEFINE_ACTION_FUNCTION ADD_LUA_DEFINITION
INT_VAR
  traRef  = "-1"
STR_VAR
  varName = ~~
RET
  success
BEGIN
  COPY_EXISTING_REGEXP ~L_[a-zA-Z][a-zA-Z]_[a-zA-Z][a-zA-Z]\.LUA~ ~override~
    LPF ADD_LUA_VARIABLE INT_VAR traRef = traRef STR_VAR varName = EVAL ~%varName%~ RET success END
  BUT_ONLY IF_EXISTS

  ACTION_IF (success) BEGIN
    // scan additional override folder for LUA files
    ACTION_FOR_EACH path IN ~lang/%EE_LANGUAGE%/override~ ~%USER_DIRECTORY%/override~ BEGIN
      ACTION_IF (DIRECTORY_EXISTS ~%path%~) BEGIN
        ACTION_BASH_FOR ~%path%~ ~L_[a-zA-Z][a-zA-Z]_[a-zA-Z][a-zA-Z]\.LUA~ BEGIN
          COPY ~%BASH_FOR_FILESPEC%~ ~%BASH_FOR_FILESPEC%~
            LPF ADD_LUA_VARIABLE INT_VAR traRef = traRef STR_VAR varName = EVAL ~%varName%~ RET success END
          BUT_ONLY IF_EXISTS
        END
      END
    END
  END
END


/**
 * Adds a string variable definition into the current LUA file.
 */
DEFINE_PATCH_FUNCTION ADD_LUA_VARIABLE
INT_VAR
  traRef = "-1"
STR_VAR
  varName = ~~
RET
  success
BEGIN
  SET success = 0

  PATCH_IF (traRef >= 0 AND NOT ~%varName%~ STR_EQ ~~) BEGIN
    SET startOfs = INDEX_BUFFER(~uiStrings[ %TAB%%WNL%]*=[ %TAB%%WNL%]*{~)
    SET ofs1 = INDEX_BUFFER(~[ %TAB%]*[a-zA-Z_][a-zA-Z0-9_]*[ %TAB%]*=.+,~ startOfs)
    SET failed = 0
    PATCH_IF (ofs1 < 0) BEGIN
      SET failed = 1
    END
    PATCH_IF (NOT failed) BEGIN
      SET ofs2 = INDEX_BUFFER(~[%WNL%]~ ofs1)
      PATCH_IF (ofs2 < ofs1) BEGIN
        SET failed = 1
      END
    END

    PATCH_IF (NOT failed) BEGIN
      // determining variable definition type
      READ_ASCII ofs1 curLine (ofs2 - ofs1)
      INNER_PATCH ~%curLine%~ BEGIN
        SET v = INDEX_BUFFER(~[ %TAB%]*=[ %TAB%]*"[^"]+"~)
        SET isStrref = (v < 0) ? 1 : 0
      END

      PATCH_IF (isStrref) BEGIN
        SET number = RESOLVE_STR_REF((AT traRef))
        TEXT_SPRINT line ~%TAB%%varName% = %number%,%LNL%~
      END ELSE BEGIN
        SPRINT text (AT traRef)
        INNER_PATCH_SAVE text ~%text%~ BEGIN
          REPLACE_TEXTUALLY ~%MNL%?%LNL%~ ~\n~    // line break -> symbolic line break
          REPLACE_TEXTUALLY ~\([^\\]\)"~ ~\1\"~   // double-quotes must be escaped
          REPLACE_TEXTUALLY ~\^[0-9A-Z$]\([^^]+\)\^-~ ~\1~   // just a precaution: older games don't appear to support colored text in options menu yet
        END
        TEXT_SPRINT line ~%TAB%%varName% = "%text%",%LNL%~
      END

      // inserting text definition
      SET strlen = STRING_LENGTH ~%line%~
      INSERT_BYTES ofs1 strlen
      WRITE_ASCIIE ofs1 ~%line%~

      SET success = 1
    END
  END
END


/**
 * Returns the value associated to the specified variable name found in L_xx_YY.LUA (where xx_YY is a language code).
 * STR_VAR varName  The variable name
 * RET value        The numeric value assigned to the variable. Returns -1 if not available.
 */
DEFINE_ACTION_FUNCTION GET_LUA_VALUE
STR_VAR
  varName = ""
RET
  value
BEGIN
  OUTER_SET value = "-1"

  OUTER_TEXT_SPRINT luaFile ~L_%EE_LANGUAGE%.LUA~
  ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%luaFile%~) BEGIN
    OUTER_TEXT_SPRINT luaFile ~L_EN_US.LUA~
    ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%luaFile%~) BEGIN
      OUTER_TEXT_SPRINT luaFile ~~
      COPY_EXISTING_REGEXP - ~L_[a-zA-Z][a-zA-Z]_[a-zA-Z][a-zA-Z]\.LUA~ ~override~
        PATCH_IF (~%luaFile%~ STR_EQ ~~) BEGIN
          TEXT_SPRINT luaFile ~%SOURCE_FILE%~
        END
    END
  END

  ACTION_IF (FILE_EXISTS_IN_GAME ~%luaFile%~) BEGIN
    COPY_EXISTING - ~%luaFile%~ ~override~
      SET ofs1 = INDEX_BUFFER(~.*%varName%[ %TAB%]*=~)
      PATCH_IF (ofs1 >= 0) BEGIN
        SET ofs2 = INDEX_BUFFER(~[%WNL%]~ ofs1)
        PATCH_IF (ofs2 > ofs1) BEGIN
          READ_ASCII ofs1 line (ofs2 - ofs1)
          INNER_PATCH_SAVE val ~%line%~ BEGIN REPLACE_TEXTUALLY ~.*=[ %TAB%]*\(-?[0-9]*\).*~ ~\1~ END
          PATCH_IF (~%val%~ STR_EQ ~~) BEGIN
            // value may be a literal string
            INNER_PATCH_SAVE string ~%line%~ BEGIN REPLACE_TEXTUALLY ~.*=[ %TAB%]*"\([^"]*\)".*~ ~\1~ END
            INNER_PATCH_SAVE string ~%string%~ BEGIN REPLACE_TEXTUALLY ~\\n~ ~%LNL%~ END
            SET value = RESOLVE_STR_REF(~%string%~)
          END ELSE PATCH_IF (IS_AN_INT "val") BEGIN
            // value is a valid number
            SET value = val
          END
        END
      END
  END
END

DEFINE_PATCH_FUNCTION GET_LUA_VALUE
STR_VAR
  varName = ""
RET
  value
BEGIN
  INNER_ACTION BEGIN
    LAF GET_LUA_VALUE STR_VAR varName = EVAL ~%varName%~ RET value END
  END
END


// Used internally: implements a workaround to prevent options from being reset
DEFINE_PATCH_FUNCTION __A7_INIT_CODE
RET success
BEGIN
  SET success = 1

  PATCH_IF (INDEX_BUFFER(~function[ %TAB%]+getDeferredOption~) < 0) BEGIN
    // global function definitions
    TEXT_SPRINT code ~`
deferredOptions = {}

function getDeferredOption(section, option)
	if (not deferredOptions[tostring(section)]) then
		deferredOptions[tostring(section)] = {}
	end
	if (not deferredOptions[section][tostring(option)]) then
		deferredOptions[section][tostring(option)] =  tonumber(Infinity_GetINIValue(section,option)) or 0
	end
	return deferredOptions[section][option]
end

function setDeferredOption(section, option, value)
	if (not deferredOptions[tostring(section)]) then
		deferredOptions[tostring(section)] = {}
	end
	deferredOptions[section][tostring(option)] = tonumber(value) or 0
end

function flushDeferredOptions()
	for s,t in pairs(deferredOptions) do
		for o,v in pairs(t) do
			Infinity_SetINIValue(s,o,v)
		end
	end
end
`
~
    SET codeLen = STRING_LENGTH ~%code%~
    INSERT_BYTES 0 codeLen
    WRITE_ASCIIE 0 ~%code%~

    // add calls to flushDeferredOptions()
    // 1. start menu
    SET ofs = INDEX_BUFFER(~menu[ %TAB%%WNL%]*{[ %TAB%%WNL%]*name[ %TAB%]+['"]START['"]~)
    PATCH_IF (ofs >= 0) BEGIN
      SET ofs = INDEX_BUFFER(~onOpen[ %TAB%%WNL%]+"~ ofs)
      PATCH_IF (ofs >= 0) BEGIN
        SET ofs = INDEX_BUFFER(~"~ ofs) + 1
        TEXT_SPRINT code ~%WNL%%TAB%%TAB%flushDeferredOptions()~
        SET codeLen = STRING_LENGTH ~%code%~
        INSERT_BYTES ofs codeLen
        WRITE_ASCIIE ofs ~%code%~
      END ELSE BEGIN
        SET success = 0
      END
    END ELSE BEGIN
      SET success = 0
    END

    // 2. quit menu
    PATCH_IF (success) BEGIN
      SET ofs = INDEX_BUFFER(~menu[ %TAB%%WNL%]*{[ %TAB%%WNL%]*name[ %TAB%]+['"]QuitMenu['"]~)
      PATCH_IF (ofs >= 0) BEGIN
        PATCH_IF (GAME_IS ~pstee~) BEGIN
          TEXT_SPRINT name ~YES_BUTTON~
        END ELSE BEGIN
          TEXT_SPRINT name ~QUIT_GAME_BUTTON~
        END
        SET ofs = INDEX_BUFFER(~['"]%name%['"]~ ofs)
        PATCH_IF (ofs >= 0) BEGIN
          SET ofs = INDEX_BUFFER(~action[ %TAB%%WNL%]*"~ ofs)
          PATCH_IF (ofs >= 0) BEGIN
            SET ofs = INDEX_BUFFER(~"~ ofs) + 1
            TEXT_SPRINT code ~%WNL%%TAB%%TAB%%TAB%flushDeferredOptions()~
            SET codeLen = STRING_LENGTH ~%code%~
            INSERT_BYTES ofs codeLen
            WRITE_ASCIIE ofs ~%code%~
          END ELSE BEGIN
            SET success = 0
          END
        END ELSE BEGIN
          SET success = 0
        END
      END ELSE BEGIN
        SET success = 0
      END
    END

    // 3. esc menu / start main
    PATCH_IF (success && NOT GAME_IS ~pstee~) BEGIN
      PATCH_IF (MOD_IS_INSTALLED ~LeUI.tp2~ 0) BEGIN
        SET lefreut = 1
        TEXT_SPRINT name ~START_MAIN~
      END ELSE BEGIN
        SET lefreut = 0
        TEXT_SPRINT name ~ESC_MENU~
      END
      SET ofs = INDEX_BUFFER(~menu[ %TAB%%WNL%]*{[ %TAB%%WNL%]*name[ %TAB%]+['"]%name%['"]~)
      PATCH_IF (ofs >= 0) BEGIN
        SET ofs = INDEX_BUFFER(~['"]QUIT_GAME_BUTTON['"]~ ofs)
        PATCH_IF (ofs >= 0) BEGIN
          PATCH_IF (lefreut) BEGIN
            // special handling: lefreut's UI
            SET ofs = INDEX_BUFFER(~action[ %TAB%%WNL%]*"~ ofs)
            PATCH_IF (ofs >= 0) BEGIN
              SET ofs = INDEX_BUFFER(~"~ ofs) + 1
              TEXT_SPRINT code ~%WNL%%TAB%%TAB%%TAB%flushDeferredOptions()~
              SET codeLen = STRING_LENGTH ~%code%~
              INSERT_BYTES ofs codeLen
              WRITE_ASCIIE ofs ~%code%~
            END ELSE BEGIN
              SET success = 0
            END
          END ELSE BEGIN
            // remaining games
            SET ofs = INDEX_BUFFER(~['"]QUIT_BUTTON['"],[ %TAB%]*function()[ %TAB%]+Infinity_ShutdownGame()[ %TAB%]+end,~ ofs)
            PATCH_IF (ofs >= 0) BEGIN
              SET ofs = INDEX_BUFFER(~Infinity_ShutdownGame()~ ofs)
              PATCH_IF (ofs > 0) BEGIN
                TEXT_SPRINT code ~flushDeferredOptions() ~
                SET codeLen = STRING_LENGTH ~%code%~
                INSERT_BYTES ofs codeLen
                WRITE_ASCIIE ofs ~%code%~
              END ELSE BEGIN
                SET success = 0
              END
            END ELSE BEGIN
              SET success = 0
            END
          END
        END ELSE BEGIN
          SET success = 0
        END
      END ELSE BEGIN
        SET success = 0
      END
    END
  END
END
