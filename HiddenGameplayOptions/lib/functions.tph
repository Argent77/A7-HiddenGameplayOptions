// *** Generic UI-related functions ***

/**
 * Adds a new string variable definition into available L_xx_YY.LUA resources.
 * INT_VAR traRef   TRA reference number of the string to add.
 * STR_VAR varName  Name of the variable to add.
 * RET success      Returns 1 if definition has been added successfully to all available LUA files, 0 otherwise.
 */
DEFINE_ACTION_FUNCTION ADD_LUA_DEFINITION
INT_VAR
  traRef = "-1"
STR_VAR
  varName = ~~
RET
  success
BEGIN
  OUTER_SET success = 0

  ACTION_IF (traRef >= 0 AND NOT ~%varName%~ STR_EQ ~~) BEGIN
    COPY_EXISTING_REGEXP ~L_[a-zA-Z][a-zA-Z]_[a-zA-Z][a-zA-Z]\.LUA~ ~override~
      SET startOfs = INDEX_BUFFER(~uiStrings[ %TAB%%WNL%]*=[ %TAB%%WNL%]*{~)
      SET ofs1 = INDEX_BUFFER(~[ %TAB%]*[a-zA-Z_][a-zA-Z0-9_]*[ %TAB%]*=.+,~ startOfs)
      SET failed = 0
      PATCH_IF (ofs1 < 0) BEGIN
        SET failed = 1
      END
      PATCH_IF (NOT failed) BEGIN
        SET ofs2 = INDEX_BUFFER(~[%WNL%]~ ofs1)
        PATCH_IF (ofs2 < ofs1) BEGIN
          SET failed = 1
        END
      END

      PATCH_IF (NOT failed) BEGIN
        // determining variable definition type
        READ_ASCII ofs1 curLine (ofs2 - ofs1)
        INNER_PATCH ~%curLine%~ BEGIN
          SET v = INDEX_BUFFER(~[ %TAB%]*=[ %TAB%]*"[^"]+"~)
          SET isStrref = (v < 0) ? 1 : 0
        END

        PATCH_IF (isStrref) BEGIN
          SET number = RESOLVE_STR_REF((AT traRef))
          TEXT_SPRINT line ~%TAB%%varName% = %number%,%LNL%~
        END ELSE BEGIN
          SPRINT text (AT traRef)
          INNER_PATCH_SAVE text ~%text%~ BEGIN
            REPLACE_TEXTUALLY ~%MNL%?%LNL%~ ~\n~    // line break -> symbolic line break
            REPLACE_TEXTUALLY ~\([^\\]\)"~ ~\1\"~   // double-quotes must be escaped
            REPLACE_TEXTUALLY ~\^[0-9A-Z$]\([^^]+\)\^-~ ~\1~   // just a precaution: older games don't appear to support colored text in options menu yet
          END
          TEXT_SPRINT line ~%TAB%%varName% = "%text%",%LNL%~
        END

        // inserting text definition
        SET strlen = STRING_LENGTH ~%line%~
        INSERT_BYTES ofs1 strlen
        WRITE_ASCIIE ofs1 ~%line%~

        SET success = 1
      END
  END
END


/**
 * Returns the value associated to the specified variable name found in L_xx_YY.LUA (where xx_YY is a language code).
 * STR_VAR varName  The variable name
 * RET value        The numeric value assigned to the variable. Returns -1 if not available.
 */
DEFINE_ACTION_FUNCTION GET_LUA_VALUE
STR_VAR
  varName = ""
RET
  value
BEGIN
  OUTER_SET value = "-1"

  OUTER_TEXT_SPRINT luaFile ~L_%EE_LANGUAGE%.LUA~
  ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%luaFile%~) BEGIN
    OUTER_TEXT_SPRINT luaFile ~L_EN_US.LUA~
    ACTION_IF (NOT FILE_EXISTS_IN_GAME ~%luaFile%~) BEGIN
      OUTER_TEXT_SPRINT luaFile ~~
      COPY_EXISTING_REGEXP - ~L_[a-zA-Z][a-zA-Z]_[a-zA-Z][a-zA-Z]\.LUA~ ~override~
        PATCH_IF (~%luaFile%~ STR_EQ ~~) BEGIN
          TEXT_SPRINT luaFile ~%SOURCE_FILE%~
        END
    END
  END

  ACTION_IF (FILE_EXISTS_IN_GAME ~%luaFile%~) BEGIN
    COPY_EXISTING - ~%luaFile%~ ~override~
      SET ofs1 = INDEX_BUFFER(~.*%varName%[ %TAB%]*=~)
      PATCH_IF (ofs1 >= 0) BEGIN
        SET ofs2 = INDEX_BUFFER(~[%WNL%]~ ofs1)
        PATCH_IF (ofs2 > ofs1) BEGIN
          READ_ASCII ofs1 line (ofs2 - ofs1)
          INNER_PATCH_SAVE val ~%line%~ BEGIN REPLACE_TEXTUALLY ~.*=[ %TAB%]*\(-?[0-9]*\).*~ ~\1~ END
          PATCH_IF (~%val%~ STR_EQ ~~) BEGIN
            // value may be a literal string
            INNER_PATCH_SAVE string ~%line%~ BEGIN REPLACE_TEXTUALLY ~.*=[ %TAB%]*"\([^"]*\)".*~ ~\1~ END
            INNER_PATCH_SAVE string ~%string%~ BEGIN REPLACE_TEXTUALLY ~\\n~ ~%LNL%~ END
            SET value = RESOLVE_STR_REF(~%string%~)
          END ELSE PATCH_IF (IS_AN_INT "val") BEGIN
            // value is a valid number
            SET value = val
          END
        END
      END
  END
END

DEFINE_PATCH_FUNCTION GET_LUA_VALUE
STR_VAR
  varName = ""
RET
  value
BEGIN
  INNER_ACTION BEGIN
    LAF GET_LUA_VALUE STR_VAR varName = EVAL ~%varName%~ RET value END
  END
END
