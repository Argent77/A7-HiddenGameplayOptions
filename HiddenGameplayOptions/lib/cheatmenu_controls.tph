INCLUDE ~%MOD_FOLDER%/lib/functions.tph~

// Replaces the whole cheat menu definition in the current MENU file by the content of the
// file specified by "filename". Returns the success state.
DEFINE_PATCH_FUNCTION UI_REPLACE_CHEAT_MENU
STR_VAR
  filename = ~~
RET
  success
BEGIN
  SET success = 0
  PATCH_IF (FILE_EXISTS ~%filename%~) BEGIN
    // finding original cheat menu
    LPF GET_UI_STRUCTURE
      STR_VAR
        name = ~menu~
        contains = EVAL ~name[ %TAB%]+["']cheatMenu['"]~
      RET
        ofs_menu_start = start_ofs
        ofs_menu_end = end_ofs
    END

    PATCH_IF (ofs_menu_start >= 0) BEGIN
      // extracting "onOpen" section from the original ui.menu
      SPRINT on_open_content ~%WNL%%TAB%onOpen%WNL%%TAB%"%WNL%%TAB%"%WNL%~  // defaults to empty "onOpen" block
      SET ofs_on_open = INDEX_BUFFER(~^[ %TAB%]*onOpen\b~ ofs_menu_start)
      PATCH_IF (ofs_on_open >= ofs_menu_start && ofs_on_open < ofs_menu_end) BEGIN
        SET ofs_on_open = INDEX_BUFFER(~[%WNL%]~ ofs_on_open - 2) // set before first line break
        SET ofs_on_open_end = INDEX_BUFFER(~"~ ofs_on_open) + 1
        SET ofs_on_open_end = INDEX_BUFFER(~^[ %TAB%]*"~ ofs_on_open_end)
        PATCH_IF (ofs_on_open_end > ofs_on_open && ofs_on_open_end < ofs_menu_end) BEGIN
          SET ofs_on_open_end = INDEX_BUFFER(~[%WNL%]~ ofs_on_open_end)
          READ_ASCII ofs_on_open on_open_content (ofs_on_open_end - ofs_on_open)
        END
      END

      // inserting new commands to "onOpen" block
      INNER_ACTION BEGIN
        COPY ~%MOD_FOLDER%/menu/ui-onopen~ ~%MOD_FOLDER%/menu/ui-onopen~
          READ_ASCII 0 ui_onopen (BUFFER_LENGTH)
        BUT_ONLY
      END
      INNER_PATCH_SAVE on_open_content ~%on_open_content%~ BEGIN
        SET ofs = RINDEX_BUFFER(~^[ %TAB%]*"~)
        PATCH_IF (ofs >= 0) BEGIN
          SET len = STRING_LENGTH ~%ui_onopen%~
          INSERT_BYTES ofs len
          WRITE_ASCIIE ofs ~%ui_onopen%~ (len)
        END
      END

      // removing original cheat menu
      DELETE_BYTES ofs_menu_start (ofs_menu_end - ofs_menu_start)

      // inserting new content
      SET file_len = SIZE_OF_FILE ~%filename%~
      PATCH_IF (file_len > 0) BEGIN
        INSERT_FILE ofs_menu_start ~%filename%~ EVAL
        SET success = 1
      END
    END
  END
END


// Preparing lua functions and tables
COPY ~%MOD_FOLDER%/lua/M_a7rhgo.lua~ ~override~
  // Resolving tra references
  REPLACE_EVALUATE ~@\([0-9]+\)~ BEGIN
    PATCH_IF (IS_AN_INT ~MATCH1~) BEGIN
      SPRINT msg (AT "MATCH1")
      SPRINT msg ~"%msg%"~
    END ELSE BEGIN
      SPRINT msg ~""~
      PATCH_WARN ~Not a valid tra reference: %MATCH0%~
    END
  END ~%msg%~

COPY ~%MOD_FOLDER%/menu/ui-vars.menu~ ~%MOD_FOLDER%/menu/ui-vars.menu~
  READ_ASCII 0 ui_vars (BUFFER_LENGTH)
BUT_ONLY


// Add before/after vanilla variable initializations
COPY_EXISTING ~ui.menu~ ~override~
  // inserting lua variables
  SET ofs = INDEX_BUFFER(~^[ %TAB%]*cheatGoldAmt[ %TAB%]*=[ %TAB%]*[0-9]+~)
  PATCH_IF (ofs >= 0) BEGIN
    SET len = STRING_LENGTH ~%ui_vars%~
    INSERT_BYTES ofs len
    WRITE_ASCIIE ofs ~%ui_vars%~ (len)
  END ELSE BEGIN
    PATCH_FAIL ~Could not find cheat menu definition in UI.MENU~
  END

  // replacing cheat menu
  LPF UI_REPLACE_CHEAT_MENU
    STR_VAR filename = EVAL ~%MOD_FOLDER%/menu/ui-%ui_mode%.menu~
    RET success
  END
  PATCH_IF (NOT success) BEGIN
    PATCH_FAIL ~Could not update cheat menu definition to UI.MENU~
  END
BUT_ONLY


// PSTEE: Installing modified background image for cheat menu
ACTION_IF (~%ui_mode%~ STR_EQ ~pstee~) BEGIN
  COPY ~%MOD_FOLDER%/mos/cheatbg0.mos~ ~override~
    LPF UPDATE_PVRZ_INDICES
      RET original_base_index new_base_index index_range
    END

  OUTER_FOR (i = 0; i < index_range; ++i) BEGIN
    OUTER_SET src_idx = original_base_index + i
    OUTER_SPRINT index ~0000%src_idx%~
    OUTER_PATCH_SAVE index ~%index%~ BEGIN DELETE_BYTES 0 (BUFFER_LENGTH - 4) END

    LAF INSTALL_PVRZ
      INT_VAR
        original_base_index
        new_base_index
      STR_VAR
        source_file = EVAL ~%MOD_FOLDER%/mos/mos%index%.pvrz~
    END
  END
END
